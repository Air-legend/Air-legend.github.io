<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://air-legend.github.io/</id><title>Bean</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-01-30T17:02:54+08:00</updated> <author> <name>bean</name> <uri>https://air-legend.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://air-legend.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://air-legend.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 bean </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>局域网远程连接jupyter notebook lab</title><link href="https://air-legend.github.io/posts/jupter_lab_remote/" rel="alternate" type="text/html" title="局域网远程连接jupyter notebook lab" /><published>2023-01-30T12:10:00+08:00</published> <updated>2023-01-30T17:02:20+08:00</updated> <id>https://air-legend.github.io/posts/jupter_lab_remote/</id> <content src="https://air-legend.github.io/posts/jupter_lab_remote/" /> <author> <name>bean</name> </author> <category term="tools" /> <summary> 安装 1. 安装 conda/miniconda并进行初始化 2. 安装 jupyterlab &amp;gt; conda install -c conda-forge jupyterlab 配置 1. 创建 config 文档 &amp;gt; jupyter notebook --generate-config ## 2. 设置登录密码 &amp;gt; jupyter notebook password ## 3. 配置config 文件一般保存在 ~/.jupyter/jupyter_notebook_config.py &amp;gt; c.NotebookApp.notebook_dir = '/home/digisky/notebooks' &amp;gt; c.NotebookApp.ip='*' # 允许所有ip访问 &amp;gt; c.NotebookApp.open_browser = F... </summary> </entry> <entry><title>Multi Game Decision Transformers</title><link href="https://air-legend.github.io/posts/MGDT/" rel="alternate" type="text/html" title="Multi Game Decision Transformers" /><published>2022-08-10T15:50:00+08:00</published> <updated>2022-08-10T15:50:00+08:00</updated> <id>https://air-legend.github.io/posts/MGDT/</id> <content src="https://air-legend.github.io/posts/MGDT/" /> <author> <name>bean</name> </author> <category term="Deep Learning" /> <category term="RL" /> <summary> 简介 研究人员提出了一种Multi-Game Decision Transformer通用结构，能够有效的执行多种任务和快速的学习决策新任务。 模型利用基于 transformer 的模型在 offline 情况下训练出在46个 atari 游戏中接近人类玩家水平的智能体。同时，该模型在视觉和语言任务中的某些方面，包括模型尺寸对表现的影响（文章使用 power-law 来说明）和通过 fine-tuning 在新任务上的快速适应能力上有着类似的趋势。老样子，经过各种实验比对，证实该模型拥有最棒的表现和扩展性。 强化学习序列模型 文章将离线强化学习过程看作是一个序列模型问题，以历史token $x_{&amp;lt;i}$ 作为条件来建模 $x_i$ 的概率分布 $P_\theta(x_i|x_{&amp;lt;i})$, 其中序列使用了以下定义形式: \[x = &amp;lt;...,o_1^t, ... </summary> </entry> <entry><title>Transformer学习</title><link href="https://air-legend.github.io/posts/transformer/" rel="alternate" type="text/html" title="Transformer学习" /><published>2022-08-10T10:42:00+08:00</published> <updated>2022-08-10T10:42:00+08:00</updated> <id>https://air-legend.github.io/posts/transformer/</id> <content src="https://air-legend.github.io/posts/transformer/" /> <author> <name>bean</name> </author> <category term="Deep Learning" /> <summary> bilibili 视频学习链接 编码器 位置编码： $PE_(pos,2i) = sin(pos/10000^{2i/d_{model}}) $ $PE_(pos,2i+1) = cos(pos/10000^{2i/d_{model}})$ 借助正余弦公式: $ sin(\alpha+\beta) = sin\alpha cos\beta + cos\alpha sin\beta $ $ cos(\alpha+\beta) = cos\alpha cos\beta - sin\alpha sin\beta $ $\rightarrow$ $ PE(pos+k,2i) = PE(pos,2i)PE(k,2i+1) + PE(pos, 2i+1) *PE(k,2i) $ $ PE(pos+k, 2i+1) = PE(pos,2i+1)PE(k,2i+... </summary> </entry> <entry><title>一切的开始</title><link href="https://air-legend.github.io/posts/%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/" rel="alternate" type="text/html" title="一切的开始" /><published>2022-07-26T10:50:00+08:00</published> <updated>2022-07-26T10:50:00+08:00</updated> <id>https://air-legend.github.io/posts/%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/</id> <content src="https://air-legend.github.io/posts/%E4%B8%80%E5%88%87%E7%9A%84%E5%BC%80%E5%A7%8B/" /> <author> <name>bean</name> </author> <category term="Blogging" /> <summary> 今天开始搭建属于自己的 github page 博客。 </summary> </entry> <entry><title>协程 &amp; asyncio &amp; 异步编程</title><link href="https://air-legend.github.io/posts/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/" rel="alternate" type="text/html" title="协程 &amp; asyncio &amp; 异步编程" /><published>2021-07-02T11:56:00+08:00</published> <updated>2022-07-28T17:10:11+08:00</updated> <id>https://air-legend.github.io/posts/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/</id> <content src="https://air-legend.github.io/posts/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/" /> <author> <name>bean</name> </author> <category term="Technology" /> <category term="python" /> <summary> 1.协程 ​ 协程（Coroutine）不是计算机提供，程序员人为创造。 ​ 通过一个线程实现代码块相互切换执行。 实现方法： 1. greenlet，早期模块 2. yield关键字 3. asyncio装饰器（py3.4⬆️） 4. async，await关键字（py3.5⬆️）【推荐】 1.1 greenlet实现协程 pip install greenlet from greenlet import greenlet def func1(): print(1) gr2.switch() print(2) gr2.switch() def func2(): print(3) gr1.switch() print(4) gr1 = greenlet(func1) gr2 = greenlet(func2) gr1.swi... </summary> </entry> </feed>
